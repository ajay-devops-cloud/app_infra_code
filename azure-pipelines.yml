trigger:
  branches:
    include:
     - main
     - feature/*
parameters:
  - name: environment
    displayName: environment(dev/prod)
    type: string
    values:
      - dev
      - prod

pool: docker-agent
variables:
  configuepath: '$(System.DefaultWorkingDirectory)/environment/${{parameters.environment}}'

stages:
# Stage 1: Terraform Init & Plan
- stage: init_and_plan
  jobs:
    - job: terraform_plan
      steps:
      - task: TerraformInstaller@1
        inputs:
          terraformVersion: 'latest'
      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            # Write your PowerShell commands here.
            
            Write-Host "Hello World"
      - task: TerraformTaskV4@4
        inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(configuepath)'
            backendAzureRmResourceGroupName: 'rg-it'
            backendServiceArm: 'next-level-service-connection'
            backendAzureRmStorageAccountName: 'itsolution1'
            backendAzureRmContainerName: 'nextlevelcontainer'
            backendAzureRmKey: '${{ parameters.environment }}.itit.tfstate'
      - task: TerraformTask@5
        inputs:
          provider: 'azurerm'
          command: 'plan'
          workingDirectory: '$(configuepath)'
          environmentServiceNameAzureRM: 'next-level-service-connection'
# Stage 2: Scanning 
- stage: Scanning
  displayName: security scanning
  jobs:
    - job:
      displayName: scanning wala job
      pool: docker-agent
      steps:
      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            # Write your PowerShell commands here.
            
            Write-Host "Hello World"
      - task: trivy@2
        inputs:
          version: 'latest'
          type: 'filesystem'
          target: '$(configuepath)'
          publish: true

# Stage 3: Manual Validation stage
- stage: manual_validation
  displayName: Manual validation
  jobs:
    - job:
      displayName: Manual validation
      pool: server
      steps:
      - task: ManualValidation@1
        inputs:
          notifyUsers: 'ajaykumaryadav97@gmail.com'
          approvers: 'ajaykumaryadav97@gmail.com'
          instructions: 'Approval do sir'
          onTimeout: 'resume'
# Stage 4: Terraform Apply with Approval
- stage: deploy
  dependsOn: init_and_plan
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
  jobs:
    - job: terraformapply
      displayName: terraform apply
      pool: docker-agent
      steps:
      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: 'echo Terraform apply runs only from main branch'
      - task: TerraformTask@5
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: '$(configuepath)'
          backendAzureRmResourceGroupName: 'rg-it'
          backendServiceArm: 'next-level-service-connection'
          backendAzureRmStorageAccountName: 'itsolution1'
          backendAzureRmContainerName: 'nextlevelcontainer'
          backendAzureRmKey: '${{ parameters.environment }}.itit.tfstate'
      - task: TerraformTaskV4@4
        inputs:
          provider: 'azurerm'
          command: 'apply'
          workingDirectory: '$(configuepath)'
          environmentServiceNameAzureRM: 'next-level-service-connection'

